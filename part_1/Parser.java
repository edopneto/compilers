/* Generated By:JavaCC: Do not edit this line. Parser.java */
package analisador_lexico;
import analisador_semantico.syntaxtree.*;
public class Parser implements ParserConstants {
    public static void main(String[] args) {
        try {
            new Parser(new java.io.FileInputStream(args[0])).Goal();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }

  static final public Program Goal() throws ParseException {
    MainClass main;
    ClassDeclaration class_decl;
    ClassList class_list = new ClassList();
    main = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      class_decl = ClassDeclaration();
                                      class_list.addElement(class_decl);
    }
    jj_consume_token(0);
     {if (true) return new Program(main, class_list);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
    Identifier id1;
    Identifier id2;
    Statement statement;
    jj_consume_token(CLASS);
    id1 = Identifier();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LCOLCH);
    jj_consume_token(RCOLCH);
    id2 = Identifier();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    statement = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
     {if (true) return new Main(id1, id2, statement);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclaration ClassDeclaration() throws ParseException {
    Identifier id1;
    Identifier id2;
    VarDefinitionList var_list = new VarDefinitionList();
    VarDeclaration var;
    MethodDeclaration method;
    MethodDeclarationList method_list = new MethodDeclarationList();
    if (jj_2_1(3)) {
      jj_consume_token(CLASS);
      id1 = Identifier();
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        var = VarDeclaration();
                             var_list.addElement(var);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        method = MethodDeclaration();
                                   method_list.addElement(method);
      }
      jj_consume_token(RBRACE);
      {if (true) return new ClassSimple(id1, var_list, method_list);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);
        id1 = Identifier();
        jj_consume_token(EXTENDS);
        id2 = Identifier();
        jj_consume_token(LBRACE);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case BOOLEAN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          var = VarDeclaration();
                                 var_list.addElement(var);
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_5;
          }
          method = MethodDeclaration();
                                       method_list.addElement(method);
        }
        jj_consume_token(RBRACE);
          {if (true) return new ClassDeclarationExtends(id1, id2, var_list, method_list);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclaration VarDeclaration() throws ParseException {
    Type type;
    Identifier id1;
    type = Type();
    id1 = Identifier();
    jj_consume_token(SEMI_COMMA);
     {if (true) return new VarDefinition(type, id1);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclaration MethodDeclaration() throws ParseException {
    Type type;
    Identifier id1;
    FormalList formal_list = new FormalList();
    VarDeclaration var;
    VarDefinitionList var_list = new VarDefinitionList();
    Statement statement;
    StatementList statement_list = new StatementList();
    Expression exp;
    ExpList exp_list = new ExpList();
    jj_consume_token(PUBLIC);
    type = Type();
    id1 = Identifier();
    jj_consume_token(LPAREN);
    formal_list = FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      var = VarDeclaration();
                            var_list.addElement(var);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      statement = Statement();
                              statement_list.addElement(statement);
    }
    jj_consume_token(RETURN);
    exp = Expression();
    jj_consume_token(SEMI_COMMA);
    jj_consume_token(RBRACE);
          {if (true) return new MethodDefinition(type, id1, formal_list, var_list, statement_list, exp);}
    throw new Error("Missing return statement in function");
  }

  static final public Formal Formal() throws ParseException {
    Type type;
    Identifier id;
    type = Type();
    id = Identifier();
   {if (true) return new Formal(type, id);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalList() throws ParseException {
    FormalList list = new FormalList();
    Formal formal;
    Formal formal2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:
      formal = Formal();
                      list.addElement(formal);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        formal2 = FormalTail();
                           list.addElement(formal2);
      }
   {if (true) return list;}
      break;
    default:
      jj_la1[8] = jj_gen;
     {if (true) return list;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Formal FormalTail() throws ParseException {
    Type type;
    Identifier id;
    jj_consume_token(COMMA);
    type = Type();
    id = Identifier();
     {if (true) return new Formal(type, id);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
    if (jj_2_3(2)) {
      jj_consume_token(INT);
      jj_consume_token(LCOLCH);
      jj_consume_token(RCOLCH);
                           {if (true) return new ArrayType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
             {if (true) return new IntegerType();}
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
                    {if (true) return new IdentifierType(token.image);}
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                 {if (true) return new BooleanType();}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
    Statement statement;
    Statement statement2;
    Identifier id;
    StatementList statement_list = new StatementList();
    Expression exp;
    Expression exp2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRINT:
        case IF:
        case WHILE:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        statement = Statement();
                             statement_list.addElement(statement);
      }
      jj_consume_token(RBRACE);
     {if (true) return new BlockStatement(statement_list);}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      exp = Expression();
      jj_consume_token(RPAREN);
      statement = Statement();
      jj_consume_token(ELSE);
      statement2 = Statement();
         {if (true) return new IfStatement(exp, statement, statement2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      exp = Expression();
      jj_consume_token(RPAREN);
      statement = Statement();
         {if (true) return new WhileStatement(exp, statement);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      exp = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMI_COMMA);
         {if (true) return new PrintStatement(exp);}
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_4(2)) {
        id = Identifier();
        jj_consume_token(EQUAL);
        exp = Expression();
        jj_consume_token(SEMI_COMMA);
         {if (true) return new AssignStatement(exp, id);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          id = Identifier();
          jj_consume_token(LCOLCH);
          exp = Expression();
          jj_consume_token(RCOLCH);
          jj_consume_token(EQUAL);
          exp2 = Expression();
          jj_consume_token(SEMI_COMMA);
         {if (true) return new ArrayAssignStatement(exp, exp2, id);}
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Exp(Expression exp) throws ParseException {
    Expression exp2;
    AndExpression ad;
    LessExpression less;
    PlusExpression plus;
    MinusExpression minus;
    MultExpression mult;
    ListExpression arrayExpression;
    LengthExpression len;
    Identifier id;
    ExpList expList;
    BigExpression bigExpression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      exp2 = Expression();
     ad = new AndExpression(exp, exp2);
     {if (true) return Exp(ad);}
      break;
    case LESS_THEN:
      jj_consume_token(LESS_THEN);
      exp2 = Expression();
     less = new LessExpression(exp, exp2);
     {if (true) return Exp(less);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      exp2 = Expression();
     plus = new PlusExpression(exp, exp2);
     {if (true) return Exp(plus);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      exp2 = Expression();
     minus =  new MinusExpression(exp, exp2);
     {if (true) return Exp(minus);}
      break;
    case STAR:
      jj_consume_token(STAR);
      exp2 = Expression();
     mult = new MultExpression(exp, exp2);
     {if (true) return Exp(mult);}
      break;
    case LCOLCH:
      jj_consume_token(LCOLCH);
      exp2 = Expression();
      jj_consume_token(RCOLCH);
     arrayExpression = new ListExpression(exp, exp2);
     {if (true) return Exp(arrayExpression);}
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_5(3)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
     len = new LengthExpression(exp);
     {if (true) return Exp(len);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
     id = Identifier();
          jj_consume_token(LPAREN);
     expList = ExpList();
          jj_consume_token(RPAREN);
     bigExpression = new BigExpression(exp, id, expList);
         {if (true) return Exp(bigExpression);}
          break;
        default:
          jj_la1[14] = jj_gen;
       {if (true) return exp;}
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
    IntegerLiteralExpression int_li;
    TrueExpression t;
    FalseExpression f;
    Identifier id;
    ThisExpression thi;
    Expression exp;
    Identifier id2;
    Expression exp2;
    NewIntegerExpression newInteger;
    NewIdentifierExpression newIdentifier;
    NotExpression no;
    Expression exp3, exp4;
    IdentifierExpression id3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
     int_li = new IntegerLiteralExpression(Integer.parseInt(token.image));
      {if (true) return Exp(int_li);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
     t = new TrueExpression();
      {if (true) return Exp(t);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
     f = new FalseExpression();
      {if (true) return Exp(f);}
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
     id3 = new IdentifierExpression(token.image);
      {if (true) return Exp(id3);}
      break;
    case THIS:
      jj_consume_token(THIS);
     thi = new ThisExpression();
     {if (true) return Exp(thi);}
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_6(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LCOLCH);
        exp = Expression();
        jj_consume_token(RCOLCH);
      newInteger = new NewIntegerExpression(exp);
     {if (true) return Exp(newInteger);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
     id2 = Identifier();
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
     newIdentifier = new NewIdentifierExpression(id2);
         {if (true) return Exp(newIdentifier);}
          break;
        case BANG:
          jj_consume_token(BANG);
          exp3 = Expression();
     no = new NotExpression(exp3);
     {if (true) return Exp(no);}
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          exp4 = Expression();
          jj_consume_token(RPAREN);
     {if (true) return Exp(exp4);}
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
    Expression exp1;
    Expression exp2;
    ExpList expList = new ExpList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case TRUE:
    case FALSE:
    case THIS:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case LPAREN:
    case BANG:
      exp1 = Expression();
                          expList.addElement(exp1);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_10;
        }
        exp2 = ExpTail();
                       expList.addElement(exp2);
      }
     {if (true) return expList;}
      break;
    default:
      jj_la1[18] = jj_gen;
      {if (true) return expList;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExpTail() throws ParseException {
    Expression exp1;
    jj_consume_token(COMMA);
    exp1 = Expression();
     {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
      {if (true) return new Identifier(token.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LCOLCH)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4,0x1018000,0x2,0x1018000,0x2,0x4,0x41002600,0x0,0x1018000,0x1018000,0x41002600,0x40002600,0x1000000,0x10000000,0x0,0x30e0000,0x4000100,0x0,0x70e0100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0xec0,0x4,0x0,0x8,0x10,0x8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
